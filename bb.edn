{:paths ["script"]
 :deps {lread/status-line {:git/url "https://github.com/lread/status-line.git"
                           :sha "35ed39645038e81b42cb15ed6753b8462e60a06d"}}
 :tasks {;; setup
         :requires ([babashka.fs :as fs]
                    [clojure.java.io :as io]
                    [clojure.string :as string]
                    [lread.status-line :as status]
                    [release])
         :enter (let [{:keys [name]} (current-task)] (status/line :head "TASK %s %s" name (string/join " " *command-line-args*)))
         :leave (let [{:keys [name]} (current-task)] (status/line :detail "\nTASK %s done." name))

         ;; commands
         lint
         {:doc "lint source code using clj-kondo"
          :task (do
                  (when (not (fs/exists? ".clj-kondo/.cache"))
                    (status/line :head "Building clj-kondo cache")
                    (let [cp (-> (shell {:out :string} "clojure -Spath -M:test")
                                 :out)]
                      (shell "clojure -M:clj-kondo --dependencies --copy-configs --lint" cp)))
                  (status/line :head "Linting")
                  (let [{:keys [exit]}
                        (shell {:continue true}
                               "clojure -M:clj-kondo --lint src test bb.edn deps.edn"
                               "modules/metagetta/src"
                               "modules/metagetta/test"
                               "modules/metagetta/deps.edn")]
                    (cond
                      (= 2 exit) (status/die exit "clj-kondo found one or more lint errors")
                      (= 3 exit) (status/die exit "clj-kondo found one or more lint warnings")
                      (> exit 0) (status/die exit "clj-kondo returned unexpected exit code"))))}

         test-metagetta
         {:doc "metagetta unit tests"
          :task (shell {:dir "modules/metagetta"}
                       "bb test")}

         test-cljdoc-analyzer-integration
         {:doc "cljdoc-analyzier integration tests"
          :task (shell "clojure -M:test"
                       "--reporter" "documentation"
                       "--plugin" "kaocha.plugin/profiling"
                       "--plugin" "kaocha.plugin/junit-xml"
                       "--junit-xml-file" "target/test-results/cljdoc-analyzer-integration/results.xml"
                       "--no-capture-output"
                       "integration")}

         test
         {:doc "Run all tests"
          :depends [test-metagetta test-cljdoc-analyzer-integration]}

         change-log-check
         {:doc "Checks that change log is ready for a release"
          :task (release/change-log-check)}

         release-checks
         {:doc "Performs all release checks"
          :task (release/release-checks)}

         release
         {:depends [release-checks test]
          :doc "Cut a new release"
          :task (release/release)}

         pretty-expected-edn
         {:doc "Format expected edn for tests with jet to make diff comparisons more grokable and files more readable"
          :task (->> (fs/glob "." "test-resources/**/cljdoc-analysis.edn")
                     (mapv (fn [in-file]
                             (let [out-file (fs/create-temp-file {:prefix "cljdoc-pretty" :suffix "edn"})]
                               (println "prettying " (str in-file))
                               (with-open [in (io/input-stream (fs/file in-file))]
                                 (shell {:in in :out (str out-file)} "jet --colors false"))
                               (fs/move out-file in-file {:replace-existing true})))))}

         outdated
         {:doc "report on outdated dependencies"
          :task (do
                  (status/line :head "Checking Clojure deps")
                  (shell {:continue true} "clojure -M:outdated" "--directory=.:modules/metagetta"))}}}
