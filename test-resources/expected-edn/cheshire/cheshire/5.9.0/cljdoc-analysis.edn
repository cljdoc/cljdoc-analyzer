{:group-id "cheshire", :artifact-id "cheshire", :version "5.9.0", :analysis {"clj" ({:doc "Main encoding and decoding namespace.\n", :name cheshire.core, :publics ({:name *generator*, :file "cheshire/core.clj", :line 121, :dynamic true, :type :var} {:name *opt-map*, :file "cheshire/core.clj", :line 122, :dynamic true, :type :var} {:name copy-arglists, :file "cheshire/core.clj", :line 355, :arglists ([dst src]), :type :macro} {:name create-generator, :file "cheshire/core.clj", :line 113, :arglists ([writer]), :doc "Returns JsonGenerator for given writer.\n", :type :var} {:name create-pretty-printer, :file "cheshire/core.clj", :line 25, :arglists ([options]), :doc "Returns an instance of CustomPrettyPrinter based on the configuration\nprovided as argument", :type :var} {:name decode, :file "cheshire/core.clj", :line 364, :arglists ([string] [string key-fn] [string key-fn array-coerce-fn]), :doc "Alias to parse-string for clojure-json users\n", :type :var} {:name decode-smile, :file "cheshire/core.clj", :line 370, :arglists ([bytes] [bytes key-fn] [bytes key-fn array-coerce-fn]), :doc "Alias to parse-smile for clojure-json users\n", :type :var} {:name decode-stream, :file "cheshire/core.clj", :line 368, :arglists ([rdr] [rdr key-fn] [rdr key-fn array-coerce-fn]), :doc "Alias to parse-stream for clojure-json users\n", :type :var} {:name decode-strict, :file "cheshire/core.clj", :line 366, :arglists ([string] [string key-fn] [string key-fn array-coerce-fn]), :doc "Alias to parse-string-strict for clojure-json users\n", :type :var} {:name default-pretty-print-options, :file "cheshire/core.clj", :line 16, :type :var} {:name encode, :file "cheshire/core.clj", :line 358, :arglists ([obj] [obj opt-map]), :doc "Alias to generate-string for clojure-json users\n", :type :var} {:name encode-smile, :file "cheshire/core.clj", :line 362, :arglists ([obj] [obj opt-map]), :doc "Alias to generate-smile for clojure-json users\n", :type :var} {:name encode-stream, :file "cheshire/core.clj", :line 360, :arglists ([obj writer] [obj writer opt-map]), :doc "Alias to generate-stream for clojure-json users\n", :type :var} {:name eof, :file "cheshire/core.clj", :line 309, :doc "Object used to determine end of lazy parsing attempt.\n", :type :var} {:name generate-cbor, :file "cheshire/core.clj", :line 172, :arglists ([obj] [obj opt-map]), :doc "Returns a CBOR-encoded byte-array for the given Clojure object.\nTakes an optional date format string that Date objects will be encoded with.\n\nThe default date format (in UTC) is: yyyy-MM-dd'T'HH:mm:ss'Z'", :type :var} {:name generate-smile, :file "cheshire/core.clj", :line 152, :arglists ([obj] [obj opt-map]), :doc "Returns a SMILE-encoded byte-array for the given Clojure object.\nTakes an optional date format string that Date objects will be encoded with.\n\nThe default date format (in UTC) is: yyyy-MM-dd'T'HH:mm:ss'Z'", :type :var} {:name generate-stream, :file "cheshire/core.clj", :line 81, :arglists ([obj writer] [obj writer opt-map]), :doc "Returns a BufferedWriter for the given Clojure object with the JSON-encoded\ndata written to the writer. Takes an optional date format string that Date\nobjects will be encoded with.\n\nThe default date format (in UTC) is: yyyy-MM-dd'T'HH:mm:ss'Z'", :type :var} {:name generate-string, :file "cheshire/core.clj", :line 49, :arglists ([obj] [obj opt-map]), :doc "Returns a JSON-encoding String for the given Clojure object. Takes an\noptional date format string that Date objects will be encoded with.\n\nThe default date format (in UTC) is: yyyy-MM-dd'T'HH:mm:ss'Z'", :type :var} {:name parse-cbor, :file "cheshire/core.clj", :line 293, :arglists ([bytes] [bytes key-fn] [bytes key-fn array-coerce-fn]), :doc "Returns the Clojure object corresponding to the given CBOR-encoded bytes.\nAn optional key-fn argument can be either true (to coerce keys to keywords),\nfalse to leave them as strings, or a function to provide custom coercion.\n\nThe array-coerce-fn is an optional function taking the name of an array field,\nand returning the collection to be used for array values.", :type :var} {:name parse-smile, :file "cheshire/core.clj", :line 277, :arglists ([bytes] [bytes key-fn] [bytes key-fn array-coerce-fn]), :doc "Returns the Clojure object corresponding to the given SMILE-encoded bytes.\nAn optional key-fn argument can be either true (to coerce keys to keywords),\nfalse to leave them as strings, or a function to provide custom coercion.\n\nThe array-coerce-fn is an optional function taking the name of an array field,\nand returning the collection to be used for array values.", :type :var} {:name parse-stream, :file "cheshire/core.clj", :line 233, :arglists ([rdr] [rdr key-fn] [rdr key-fn array-coerce-fn]), :doc "Returns the Clojure object corresponding to the given reader, reader must\nimplement BufferedReader. An optional key-fn argument can be either true (to\ncoerce keys to keywords),false to leave them as strings, or a function to\nprovide custom coercion.\n\nThe array-coerce-fn is an optional function taking the name of an array field,\nand returning the collection to be used for array values.\n\nIf the top-level object is an array, it will be parsed lazily (use\n`parse-strict' if strict parsing is required for top-level arrays.\n\nIf multiple objects (enclosed in a top-level `{}' need to be parsed lazily,\nsee parsed-seq.", :type :var} {:name parse-stream-strict, :file "cheshire/core.clj", :line 257, :arglists ([rdr] [rdr key-fn] [rdr key-fn array-coerce-fn]), :doc "Returns the Clojure object corresponding to the given reader, reader must\nimplement BufferedReader. An optional key-fn argument can be either true (to\ncoerce keys to keywords),false to leave them as strings, or a function to\nprovide custom coercion.\n\nThe array-coerce-fn is an optional function taking the name of an array field,\nand returning the collection to be used for array values.\n\nDoes not lazily parse top-level arrays.", :type :var} {:name parse-string, :file "cheshire/core.clj", :line 193, :arglists ([string] [string key-fn] [string key-fn array-coerce-fn]), :doc "Returns the Clojure object corresponding to the given JSON-encoded string.\nAn optional key-fn argument can be either true (to coerce keys to keywords),\nfalse to leave them as strings, or a function to provide custom coercion.\n\nThe array-coerce-fn is an optional function taking the name of an array field,\nand returning the collection to be used for array values.\n\nIf the top-level object is an array, it will be parsed lazily (use\n`parse-strict' if strict parsing is required for top-level arrays.", :type :var} {:name parse-string-strict, :file "cheshire/core.clj", :line 214, :arglists ([string] [string key-fn] [string key-fn array-coerce-fn]), :doc "Returns the Clojure object corresponding to the given JSON-encoded string.\nAn optional key-fn argument can be either true (to coerce keys to keywords),\nfalse to leave them as strings, or a function to provide custom coercion.\n\nThe array-coerce-fn is an optional function taking the name of an array field,\nand returning the collection to be used for array values.\n\nDoes not lazily parse top-level arrays.", :type :var} {:name parsed-seq, :file "cheshire/core.clj", :line 321, :arglists ([reader] [reader key-fn] [reader key-fn array-coerce-fn]), :doc "Returns a lazy seq of Clojure objects corresponding to the JSON read from\nthe given reader. The seq continues until the end of the reader is reached.\n\nThe array-coerce-fn is an optional function taking the name of an array field,\nand returning the collection to be used for array values.\nIf non-laziness is needed, see parse-stream.", :type :var} {:name parsed-smile-seq, :file "cheshire/core.clj", :line 338, :arglists ([reader] [reader key-fn] [reader key-fn array-coerce-fn]), :doc "Returns a lazy seq of Clojure objects corresponding to the SMILE read from\nthe given reader. The seq continues until the end of the reader is reached.\n\nThe array-coerce-fn is an optional function taking the name of an array field,\nand returning the collection to be used for array values.", :type :var} {:name with-writer, :file "cheshire/core.clj", :line 124, :arglists ([[writer opt-map] & body]), :type :macro} {:name write, :file "cheshire/core.clj", :line 136, :arglists ([obj] [obj wholeness]), :doc "Write given Clojure object as a piece of data within with-writer.\nList of wholeness acceptable values:\n- no value - the same as :all\n- :all - write object in a regular way with start and end borders\n- :start - write object with start border only\n- :start-inner - write object and its inner object with start border only\n- :end - write object with end border only.", :type :var})} {:doc "DEPRECATED\n\nMethods used for extending JSON generation to different Java classes.\nHas the same public API as core.clj so they can be swapped in and out.", :name cheshire.custom, :publics ({:name add-encoder, :file "cheshire/custom.clj", :line 300, :arglists ([cls encoder]), :doc "Provide an encoder for a type not handled by Cheshire.\n\nex. (add-encoder java.net.URL encode-string)\n\nSee encode-str, encode-map, etc, in the cheshire.custom\nnamespace for encoder examples.", :type :var} {:name decode, :file "cheshire/custom.clj", :line 100, :arglists ([string] [string key-fn] [string key-fn array-coerce-fn]), :type :var} {:name decode-smile, :file "cheshire/custom.clj", :line 104, :arglists ([bytes] [bytes key-fn] [bytes key-fn array-coerce-fn]), :type :var} {:name decode-stream, :file "cheshire/custom.clj", :line 102, :arglists ([rdr] [rdr key-fn] [rdr key-fn array-coerce-fn]), :type :var} {:name encode, :file "cheshire/custom.clj", :line 51, :arglists ([obj] [obj opt-map]), :type :var} {:name encode*, :file "cheshire/custom.clj", :line 33, :arglists ([obj] [obj opt-map]), :type :var} {:name encode-bool, :file "cheshire/custom.clj", :line 169, :arglists ([b jg]), :doc "Encode a Boolean object to the json generator.\n", :type :var} {:name encode-date, :file "cheshire/custom.clj", :line 162, :arglists ([d jg]), :doc "Encode a date object to the json generator.\n", :type :var} {:name encode-int, :file "cheshire/custom.clj", :line 144, :arglists ([n jg]), :doc "Encode anything implementing java.lang.Number to the json generator.\n", :type :var} {:name encode-long, :file "cheshire/custom.clj", :line 139, :arglists ([n jg]), :doc "Encode anything implementing java.lang.Number to the json generator.\n", :type :var} {:name encode-map, :file "cheshire/custom.clj", :line 181, :arglists ([m jg]), :doc "Encode a clojure map to the json generator.\n", :type :var} {:name encode-named, :file "cheshire/custom.clj", :line 174, :arglists ([k jg]), :doc "Encode a keyword to the json generator.\n", :type :var} {:name encode-nil, :file "cheshire/custom.clj", :line 124, :arglists ([_ jg]), :doc "Encode null to the json generator.\n", :type :var} {:name encode-number, :file "cheshire/custom.clj", :line 134, :arglists ([n jg]), :doc "Encode anything implementing java.lang.Number to the json generator.\n", :type :var} {:name encode-ratio, :file "cheshire/custom.clj", :line 149, :arglists ([n jg]), :doc "Encode a clojure.lang.Ratio to the json generator.\n", :type :var} {:name encode-seq, :file "cheshire/custom.clj", :line 154, :arglists ([s jg]), :doc "Encode a seq to the json generator.\n", :type :var} {:name encode-smile, :file "cheshire/custom.clj", :line 85, :arglists ([obj] [obj opt-map]), :type :var} {:name encode-smile*, :file "cheshire/custom.clj", :line 72, :arglists ([obj] [obj opt-map]), :type :var} {:name encode-str, :file "cheshire/custom.clj", :line 129, :arglists ([s jg]), :doc "Encode a string to the json generator.\n", :type :var} {:name encode-stream, :file "cheshire/custom.clj", :line 69, :arglists ([obj w] [obj w opt-map]), :type :var} {:name encode-stream*, :file "cheshire/custom.clj", :line 54, :arglists ([obj w] [obj w opt-map]), :type :var} {:name encode-symbol, :file "cheshire/custom.clj", :line 194, :arglists ([s jg]), :doc "Encode a clojure symbol to the json generator.\n", :type :var} {:name generate-smile, :file "cheshire/custom.clj", :line 116, :arglists ([obj] [obj opt-map]), :type :var} {:name generate-smile*, :file "cheshire/custom.clj", :line 118, :arglists ([obj] [obj opt-map]), :type :var} {:name generate-stream, :file "cheshire/custom.clj", :line 112, :arglists ([obj w] [obj w opt-map]), :type :var} {:name generate-stream*, :file "cheshire/custom.clj", :line 114, :arglists ([obj w] [obj w opt-map]), :type :var} {:name generate-string, :file "cheshire/custom.clj", :line 108, :arglists ([obj] [obj opt-map]), :type :var} {:name generate-string*, :file "cheshire/custom.clj", :line 110, :arglists ([obj] [obj opt-map]), :type :var} {:name handle-bigint, :file "cheshire/custom.clj", :line 210, :arglists ([]), :type :macro} {:name JSONable, :file "cheshire/custom.clj", :line 30, :type :protocol, :members ({:name to-json, :arglists ([t jg]), :type :var})} {:name parse, :file "cheshire/custom.clj", :line 90, :arglists ([string] [string key-fn] [string key-fn array-coerce-fn]), :type :var} {:name parse-smile, :file "cheshire/custom.clj", :line 96, :arglists ([bytes] [bytes key-fn] [bytes key-fn array-coerce-fn]), :type :var} {:name parse-stream, :file "cheshire/custom.clj", :line 94, :arglists ([rdr] [rdr key-fn] [rdr key-fn array-coerce-fn]), :type :var} {:name parse-string, :file "cheshire/custom.clj", :line 92, :arglists ([string] [string key-fn] [string key-fn array-coerce-fn]), :type :var} {:name parsed-seq, :file "cheshire/custom.clj", :line 98, :arglists ([reader] [reader key-fn] [reader key-fn array-coerce-fn]), :type :var} {:name remove-encoder, :file "cheshire/custom.clj", :line 312, :arglists ([cls]), :doc "Remove encoder for a given type.\n\nex. (remove-encoder java.net.URL)", :type :var})} {:name cheshire.exact, :publics ({:name decode, :file "cheshire/exact.clj", :line 40, :arglists ([string] [string key-fn] [string key-fn array-coerce-fn]), :type :var} {:name decode-strict, :file "cheshire/exact.clj", :line 42, :arglists ([string] [string key-fn] [string key-fn array-coerce-fn]), :type :var} {:name parse-string, :file "cheshire/exact.clj", :line 18, :arglists ([string] [string key-fn] [string key-fn array-coerce-fn]), :doc "Like cheshire.core/parse-string\nbut with only valid json string", :type :var} {:name parse-string-strict, :file "cheshire/exact.clj", :line 30, :arglists ([string] [string key-fn] [string key-fn array-coerce-fn]), :type :var})} {:doc "Experimental JSON encoding/decoding tools.\n", :name cheshire.experimental, :publics ({:name encode-large-field-in-map, :file "cheshire/experimental.clj", :line 8, :arglists ([obj field stream] [obj field stream & [opt-map]]), :doc "EXPERIMENTAL - SUBJECT TO CHANGE.\n\nGiven a clojure object, a field name and a stream for a the string value of\nthe field, return a stream that, when read, JSON encodes in a streamy way.\n\nAn optional opt-map can be specified to pass enocding options to the map\nencoding, supports the same options as generate-string.\n\nNote that the input stream is not closed. You are responsible for closing it\nby calling .close() on the stream object returned from this method.", :type :var})} {:doc "Factories used for JSON/SMILE generation, used by both the core and\ncustom generators.", :name cheshire.factory, :publics ({:name *cbor-factory*, :file "cheshire/factory.clj", :line 118, :dynamic true, :type :var} {:name *json-factory*, :file "cheshire/factory.clj", :line 114, :dynamic true, :type :var} {:name *smile-factory*, :file "cheshire/factory.clj", :line 116, :dynamic true, :type :var} {:name cbor-factory, :file "cheshire/factory.clj", :line 111, :type :var} {:name default-date-format, :file "cheshire/factory.clj", :line 11, :type :var} {:name default-factory-options, :file "cheshire/factory.clj", :line 13, :type :var} {:name json-factory, :file "cheshire/factory.clj", :line 108, :type :var} {:name make-cbor-factory, :file "cheshire/factory.clj", :line 81, :arglists ([opts]), :type :var} {:name make-json-factory, :file "cheshire/factory.clj", :line 27, :arglists ([opts]), :type :var} {:name make-smile-factory, :file "cheshire/factory.clj", :line 54, :arglists ([opts]), :type :var} {:name smile-factory, :file "cheshire/factory.clj", :line 109, :type :var})} {:doc "Namespace used to generate JSON from Clojure data structures.\n", :name cheshire.generate, :publics ({:name add-encoder, :file "cheshire/generate.clj", :line 233, :arglists ([cls encoder]), :doc "Provide an encoder for a type not handled by Cheshire.\n\nex. (add-encoder java.net.URL encode-string)\n\nSee encode-str, encode-map, etc, in the cheshire.custom\nnamespace for encoder examples.", :type :var} {:name byte-array?, :file "cheshire/generate.clj", :line 111, :arglists ([o]), :type :var} {:name encode-bool, :file "cheshire/generate.clj", :line 202, :arglists ([b jg]), :doc "Encode a Boolean object to the json generator.\n", :type :var} {:name encode-date, :file "cheshire/generate.clj", :line 195, :arglists ([d jg]), :doc "Encode a date object to the json generator.\n", :type :var} {:name encode-int, :file "cheshire/generate.clj", :line 177, :arglists ([n jg]), :doc "Encode anything implementing java.lang.Number to the json generator.\n", :type :var} {:name encode-long, :file "cheshire/generate.clj", :line 172, :arglists ([n jg]), :doc "Encode anything implementing java.lang.Number to the json generator.\n", :type :var} {:name encode-map, :file "cheshire/generate.clj", :line 214, :arglists ([m jg]), :doc "Encode a clojure map to the json generator.\n", :type :var} {:name encode-named, :file "cheshire/generate.clj", :line 207, :arglists ([k jg]), :doc "Encode a keyword to the json generator.\n", :type :var} {:name encode-nil, :file "cheshire/generate.clj", :line 157, :arglists ([_ jg]), :doc "Encode null to the json generator.\n", :type :var} {:name encode-number, :file "cheshire/generate.clj", :line 167, :arglists ([n jg]), :doc "Encode anything implementing java.lang.Number to the json generator.\n", :type :var} {:name encode-ratio, :file "cheshire/generate.clj", :line 182, :arglists ([n jg]), :doc "Encode a clojure.lang.Ratio to the json generator.\n", :type :var} {:name encode-seq, :file "cheshire/generate.clj", :line 187, :arglists ([s jg]), :doc "Encode a seq to the json generator.\n", :type :var} {:name encode-str, :file "cheshire/generate.clj", :line 162, :arglists ([s jg]), :doc "Encode a string to the json generator.\n", :type :var} {:name encode-symbol, :file "cheshire/generate.clj", :line 227, :arglists ([s jg]), :doc "Encode a clojure symbol to the json generator.\n", :type :var} {:name fail, :file "cheshire/generate.clj", :line 23, :arglists ([obj jg e]), :type :macro} {:name generate, :file "cheshire/generate.clj", :line 116, :arglists ([jg obj date-format ex key-fn]), :type :var} {:name generate-array, :file "cheshire/generate.clj", :line 96, :arglists ([jg obj date-format e key-fn]), :type :var} {:name generate-basic-map, :file "cheshire/generate.clj", :line 59, :arglists ([jg obj date-format e]), :type :var} {:name generate-key-fn-map, :file "cheshire/generate.clj", :line 73, :arglists ([jg obj date-format e key-fn]), :type :var} {:name generate-map, :file "cheshire/generate.clj", :line 90, :arglists ([jg obj date-format e key-fn]), :type :var} {:name i?, :file "cheshire/generate.clj", :line 105, :arglists ([k obj]), :doc "Just to shorten 'instance?' and for debugging.\n", :type :macro} {:name JSONable, :file "cheshire/generate.clj", :line 17, :type :protocol, :members ({:name to-json, :arglists ([t jg]), :type :var})} {:name number-dispatch, :file "cheshire/generate.clj", :line 31, :arglists ([jg obj e]), :type :macro} {:name remove-encoder, :file "cheshire/generate.clj", :line 245, :arglists ([cls]), :doc "Remove encoder for a given type.\n\nex. (remove-encoder java.net.URL)", :type :var} {:name tag, :file "cheshire/generate.clj", :line 13, :arglists ([obj]), :type :macro} {:name write-string, :file "cheshire/generate.clj", :line 20, :arglists ([jg str]), :type :var})} {:doc "Namespace used to generate JSON from Clojure data structures in a\nsequential way.", :name cheshire.generate-seq, :publics ({:name generate, :file "cheshire/generate_seq.clj", :line 90, :arglists ([jg obj date-format ex key-fn & {:keys [wholeness]}]), :type :var} {:name generate-array, :file "cheshire/generate_seq.clj", :line 78, :arglists ([jg obj date-format e key-fn wholeness]), :type :var} {:name generate-basic-map, :file "cheshire/generate_seq.clj", :line 32, :arglists ([jg obj date-format e wholeness]), :type :var} {:name generate-key-fn-map, :file "cheshire/generate_seq.clj", :line 50, :arglists ([jg obj date-format e key-fn wholeness]), :type :var} {:name generate-map, :file "cheshire/generate_seq.clj", :line 71, :arglists ([jg obj date-format e key-fn wholeness]), :type :var} {:name write-end-array, :file "cheshire/generate_seq.clj", :line 26, :arglists ([jg wholeness]), :type :var} {:name write-end-object, :file "cheshire/generate_seq.clj", :line 18, :arglists ([jg wholeness]), :type :var} {:name write-start-array, :file "cheshire/generate_seq.clj", :line 22, :arglists ([jg wholeness]), :type :var} {:name write-start-object, :file "cheshire/generate_seq.clj", :line 14, :arglists ([jg wholeness]), :type :var})} {:name cheshire.parse, :publics ({:name *chunk-size*, :file "cheshire/parse.clj", :line 6, :dynamic true, :type :var} {:name *use-bigdecimals?*, :file "cheshire/parse.clj", :line 8, :doc "Flag to determine whether float values should be returned as\nBigDecimals to retain precision. Defaults to false.", :dynamic true, :type :var} {:name lazily-parse-array, :file "cheshire/parse.clj", :line 48, :arglists ([jp key-fn bd? array-coerce-fn]), :type :var} {:name parse, :file "cheshire/parse.clj", :line 88, :arglists ([jp key-fn eof array-coerce-fn]), :type :var} {:name parse*, :file "cheshire/parse.clj", :line 63, :arglists ([jp key-fn bd? array-coerce-fn]), :type :var} {:name parse-array, :file "cheshire/parse.clj", :line 33, :arglists ([jp key-fn bd? array-coerce-fn]), :type :var} {:name parse-object, :file "cheshire/parse.clj", :line 17, :arglists ([jp key-fn bd? array-coerce-fn]), :type :var} {:name parse-strict, :file "cheshire/parse.clj", :line 80, :arglists ([jp key-fn eof array-coerce-fn]), :type :var})})}, :pom-str "<?xml version=\"1.0\" encoding=\"UTF-8\"?><project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>cheshire</groupId>\n  <artifactId>cheshire</artifactId>\n  <packaging>jar</packaging>\n  <version>5.9.0</version>\n  <name>cheshire</name>\n  <description>JSON and JSON SMILE encoding, fast.</description>\n  <url>https://github.com/dakrone/cheshire</url>\n  <licenses>\n    <license>\n      <name>The MIT License</name>\n      <url>http://opensource.org/licenses/MIT</url>\n      <distribution>repo</distribution>\n    </license>\n  </licenses>\n  <scm>\n    <url>https://github.com/dakrone/cheshire</url>\n    <connection>scm:git:git://github.com/dakrone/cheshire.git</connection>\n    <developerConnection>scm:git:ssh://git@github.com/dakrone/cheshire.git</developerConnection>\n    <tag>4539cfd0cf2451e53f4fd2eb18cadd24627b613d</tag>\n  </scm>\n  <build>\n    <sourceDirectory>src</sourceDirectory>\n    <testSourceDirectory>test</testSourceDirectory>\n    <resources>\n      <resource>\n        <directory>resources</directory>\n      </resource>\n    </resources>\n    <testResources>\n      <testResource>\n        <directory>resources</directory>\n      </testResource>\n    </testResources>\n    <directory>target</directory>\n    <outputDirectory>target/classes</outputDirectory>\n    <plugins>\n      <plugin>\n        <groupId>org.codehaus.mojo</groupId>\n        <artifactId>build-helper-maven-plugin</artifactId>\n        <version>1.7</version>\n        <executions>\n          <execution>\n            <id>add-source</id>\n            <phase>generate-sources</phase>\n            <goals>\n              <goal>add-source</goal>\n            </goals>\n            <configuration>\n              <sources>\n                <source>src/java</source>\n              </sources>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n  </build>\n  <repositories>\n    <repository>\n      <id>central</id>\n      <url>https://repo1.maven.org/maven2/</url>\n      <snapshots>\n        <enabled>false</enabled>\n      </snapshots>\n      <releases>\n        <enabled>true</enabled>\n      </releases>\n    </repository>\n    <repository>\n      <id>clojars</id>\n      <url>https://repo.clojars.org/</url>\n      <snapshots>\n        <enabled>true</enabled>\n      </snapshots>\n      <releases>\n        <enabled>true</enabled>\n      </releases>\n    </repository>\n  </repositories>\n  <dependencyManagement>\n    <dependencies/>\n  </dependencyManagement>\n  <dependencies>\n    <dependency>\n      <groupId>com.fasterxml.jackson.core</groupId>\n      <artifactId>jackson-core</artifactId>\n      <version>2.9.9</version>\n    </dependency>\n    <dependency>\n      <groupId>com.fasterxml.jackson.dataformat</groupId>\n      <artifactId>jackson-dataformat-smile</artifactId>\n      <version>2.9.9</version>\n    </dependency>\n    <dependency>\n      <groupId>com.fasterxml.jackson.dataformat</groupId>\n      <artifactId>jackson-dataformat-cbor</artifactId>\n      <version>2.9.9</version>\n    </dependency>\n    <dependency>\n      <groupId>tigris</groupId>\n      <artifactId>tigris</artifactId>\n      <version>0.1.1</version>\n    </dependency>\n    <dependency>\n      <groupId>org.clojure</groupId>\n      <artifactId>clojure</artifactId>\n      <version>1.8.0</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.clojure</groupId>\n      <artifactId>test.generative</artifactId>\n      <version>0.1.4</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.clojure</groupId>\n      <artifactId>tools.namespace</artifactId>\n      <version>0.2.1</version>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n</project>\n\n<!-- This file was autogenerated by Leiningen.\n  Please do not edit it directly; instead edit project.clj and regenerate it.\n  It should not be considered canonical data. For more information see\n  https://github.com/technomancy/leiningen -->\n"}