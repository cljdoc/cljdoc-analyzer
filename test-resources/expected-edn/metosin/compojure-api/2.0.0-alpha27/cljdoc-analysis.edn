{:group-id "metosin", :artifact-id "compojure-api", :version "2.0.0-alpha27", :analysis {"clj" ({:name compojure.api.api, :publics ({:name api, :file "compojure/api/api.clj", :line 19, :arglists ([& body]), :doc "Returns a ring handler wrapped in compojure.api.middleware/api-middlware.\nCreates the route-table at api creation time and injects that into the request via\nmiddlewares. Api and the mounted api-middleware can be configured by optional\noptions map as the first parameter:\n\n    (api\n      {:exceptions {:handlers {:compojure.api.exception/default my-logging-handler}}\n       :api {:invalid-routes-fn (constantly nil)}\n       :swagger {:spec \"/swagger.json\"\n                 :ui \"/api-docs\"\n                 :data {:info {:version \"1.0.0\"\n                               :title \"My API\"\n                               :description \"the description\"}}}}\n      (context \"/api\" []\n        ...))\n\n### direct api options:\n\n- **:api**                       All api options are under `:api`.\n   - **:invalid-routes-fn**        A 2-arity function taking handler and a sequence of\n                                   invalid routes (not satisfying compojure.api.route.Routing)\n                                   setting value to nil ignores invalid routes completely.\n                                   defaults to `compojure.api.routes/log-invalid-child-routes`\n   - **:disable-api-middleware?**  boolean to disable the `api-middleware` from api.\n- **:swagger**                   Options to configure the Swagger-routes. Defaults to nil.\n                                 See `compojure.api.swagger/swagger-routes` for details.\n\n### api-middleware options\n\nSee `compojure.api.middleware/api-middleware` for more available options.\n\nOpinionated chain of middlewares for web apis. Takes optional options-map.\n\n### Exception handlers\n\nAn error handler is a function of exception, ex-data and request to response.\n\nWhen defining these options, it is suggested to use alias for the exceptions namespace,\ne.g. `[compojure.api.exception :as ex]`.\n\nDefault:\n\n    {::ex/request-validation  ex/request-validation-handler\n     ::ex/request-parsing     ex/request-parsing-handler\n     ::ex/response-validation ex/response-validation-handler\n     ::ex/default             ex/safe-handler}\n\nNote: Because the handlers are merged into default handlers map, to disable default handler you\nneed to provide `nil` value as handler.\n\nNote: To catch Schema errors use `{:schema.core/error ex/schema-error-handler}`.\n\n### Options\n\n- **:exceptions**                for *compojure.api.middleware/wrap-exceptions* (nil to unmount it)\n    - **:handlers**                Map of error handlers for different exception types, type refers to `:type` key in ExceptionInfo data.\n\n- **:formats**                   for Muuntaja middleware. Value can be a valid muuntaja options-map,\n                                 a Muuntaja instance or nil (to unmount it). See\n                                 https://github.com/metosin/muuntaja/wiki/Configuration for details.\n\n- **:middleware**                vector of extra middleware to be applied last (just before the handler).\n\n- **:ring-swagger**              options for ring-swagger's swagger-json method.\n                                 e.g. `{:ignore-missing-mappings? true}`\n\n- **:coercion**                  A function from request->type->coercion-matcher, used\n                                 in endpoint coercion for types :body, :string and :response.\n                                 Defaults to `compojure.api.middleware/default-coercion`\n                                 Setting value to nil disables all coercion.\n\n- **:components**                Components which should be accessible to handlers using\n                                 :components restructuring. (If you are using api,\n                                 you might want to take look at using wrap-components\n                                 middleware manually.). Defaults to nil (middleware not mounted).", :type :var} {:name api-defaults, :file "compojure/api/api.clj", :line 12, :type :var})} {:name compojure.api.async, :publics ()} {:name compojure.api.coercion, :publics ({:name coerce-request!, :file "compojure/api/coercion.clj", :line 37, :arglists ([model in type keywordize? open? request]), :type :var} {:name coerce-response!, :file "compojure/api/coercion.clj", :line 59, :arglists ([request {:keys [status body], :as response} responses]), :type :var} {:name default-coercion, :file "compojure/api/coercion.clj", :line 11, :type :var} {:name get-apidocs, :file "compojure/api/coercion.clj", :line 33, :arglists ([mayby-coercion spec info]), :type :var} {:name get-request-coercion, :file "compojure/api/coercion.clj", :line 16, :arglists ([request]), :type :var} {:name resolve-coercion, :file "compojure/api/coercion.clj", :line 26, :arglists ([coercion]), :type :var} {:name set-request-coercion, :file "compojure/api/coercion.clj", :line 13, :arglists ([request coercion]), :type :var} {:name wrap-coerce-response, :file "compojure/api/coercion.clj", :line 92, :arglists ([handler responses]), :type :var})} {:name compojure.api.coercion.core, :publics ({:name Coercion, :file "compojure/api/coercion/core.clj", :line 3, :type :protocol, :members ({:name accept-response?, :arglists ([this model]), :type :var} {:name coerce-request, :arglists ([this model value type format request]), :type :var} {:name coerce-response, :arglists ([this model value type format request]), :type :var} {:name encode-error, :arglists ([this error]), :type :var} {:name get-apidocs, :arglists ([this model data]), :type :var} {:name get-name, :arglists ([this]), :type :var} {:name make-open, :arglists ([this model]), :type :var})} {:name CoercionError, :file "compojure/api/coercion/core.clj", :line 12, :type :var} {:name named-coercion, :file "compojure/api/coercion/core.clj", :line 14, :type :multimethod})} {:name compojure.api.coercion.schema, :publics ({:name coerce-response?, :file "compojure/api/coercion/schema.clj", :line 37, :type :multimethod} {:name create-coercion, :file "compojure/api/coercion/schema.clj", :line 85, :arglists ([options]), :type :var} {:name default-coercion, :file "compojure/api/coercion/schema.clj", :line 88, :type :var} {:name default-options, :file "compojure/api/coercion/schema.clj", :line 77, :type :var} {:name json-coercion-matcher, :file "compojure/api/coercion/schema.clj", :line 16, :type :var} {:name memoized-coercer, :file "compojure/api/coercion/schema.clj", :line 33, :type :var} {:name SchemaCoercion, :file "compojure/api/coercion/schema.clj", :line 41, :type :var} {:name string-coercion-matcher, :file "compojure/api/coercion/schema.clj", :line 15, :type :var} {:name stringify, :file "compojure/api/coercion/schema.clj", :line 18, :arglists ([error]), :doc "Stringifies Schema records recursively.\n", :type :var})} {:name compojure.api.coercion.spec, :publics ({:name coerce-response?, :file "compojure/api/coercion/spec.clj", :line 90, :type :multimethod} {:name create-coercion, :file "compojure/api/coercion/spec.clj", :line 150, :arglists ([options]), :type :var} {:name default-coercion, :file "compojure/api/coercion/spec.clj", :line 153, :type :var} {:name default-options, :file "compojure/api/coercion/spec.clj", :line 142, :type :var} {:name default-transformer, :file "compojure/api/coercion/spec.clj", :line 34, :type :var} {:name json-transformer, :file "compojure/api/coercion/spec.clj", :line 25, :type :var} {:name maybe-memoized-specify, :file "compojure/api/coercion/spec.clj", :line 80, :arglists ([spec]), :type :var} {:name memoized-specify, :file "compojure/api/coercion/spec.clj", :line 77, :type :var} {:name SpecCoercion, :file "compojure/api/coercion/spec.clj", :line 93, :type :var} {:name Specify, :file "compojure/api/coercion/spec.clj", :line 37, :type :protocol, :members ({:name specify, :arglists ([this name]), :type :var})} {:name string-transformer, :file "compojure/api/coercion/spec.clj", :line 16, :type :var} {:name stringify-pred, :file "compojure/api/coercion/spec.clj", :line 85, :arglists ([pred]), :type :var})} {:name compojure.api.common, :publics ({:name extract-parameters, :file "compojure/api/common.clj", :line 8, :arglists ([c expect-body]), :doc "Extract parameters from head of the list. Parameters can be:\n\n1. a map (if followed by any form) `[{:a 1 :b 2} :body]` => `{:a 1 :b 2}`\n2. list of keywords & values `[:a 1 :b 2 :body]` => `{:a 1 :b 2}`\n3. else => `{}`\n\nReturns a tuple with parameters and body without the parameters", :type :var} {:name fast-map-merge, :file "compojure/api/common.clj", :line 46, :arglists ([x y]), :type :var} {:name fifo-memoize, :file "compojure/api/common.clj", :line 54, :arglists ([f size]), :type :var} {:name group-with, :file "compojure/api/common.clj", :line 33, :arglists ([pred coll]), :doc "Groups a sequence with predicate returning a tuple of sequences.\n", :type :var} {:name merge-vector, :file "compojure/api/common.clj", :line 39, :arglists ([v]), :doc "Merges vector elements, optimized for 1 arity (x10 faster than merge).\n", :type :var} {:name plain-map?, :file "compojure/api/common.clj", :line 4, :arglists ([x]), :doc "checks whether input is a map, but not a record\n", :type :var} {:name when-ns, :file "compojure/api/common.clj", :line 73, :arglists ([ns & body]), :type :macro})} {:doc "Compatibility for older Compojure versions.\n", :name compojure.api.compojure-compat, :publics ()} {:name compojure.api.core, :publics ({:name ANY, :file "compojure/api/core.clj", :line 61, :arglists ([& args]), :type :macro} {:name context, :file "compojure/api/core.clj", :line 58, :arglists ([& args]), :type :macro} {:name defroutes, :file "compojure/api/core.clj", :line 24, :arglists ([name & routes]), :doc "Define a Ring handler function from a sequence of routes.\nThe name may optionally be followed by a doc-string and metadata map.", :type :macro} {:name DELETE, :file "compojure/api/core.clj", :line 64, :arglists ([& args]), :type :macro} {:name GET, :file "compojure/api/core.clj", :line 60, :arglists ([& args]), :type :macro} {:name HEAD, :file "compojure/api/core.clj", :line 62, :arglists ([& args]), :type :macro} {:name let-routes, :file "compojure/api/core.clj", :line 32, :arglists ([bindings & body]), :doc "Takes a vector of bindings and a body of routes.\n\nEquivalent to: `(let [...] (routes ...))`", :type :macro} {:name OPTIONS, :file "compojure/api/core.clj", :line 65, :arglists ([& args]), :type :macro} {:name PATCH, :file "compojure/api/core.clj", :line 63, :arglists ([& args]), :type :macro} {:name POST, :file "compojure/api/core.clj", :line 66, :arglists ([& args]), :type :macro} {:name PUT, :file "compojure/api/core.clj", :line 67, :arglists ([& args]), :type :macro} {:name ring-handler, :file "compojure/api/core.clj", :line 9, :arglists ([handler]), :doc "Creates vanilla ring-handler from any invokable thing (e.g. compojure-api route)\n", :type :var} {:name route-middleware, :file "compojure/api/core.clj", :line 47, :arglists ([middleware & body]), :doc "Wraps routes with given middlewares using thread-first macro.\n", :type :var} {:name routes, :file "compojure/api/core.clj", :line 16, :arglists ([& handlers]), :doc "Create a Ring handler by combining several handlers into one.\n", :type :var} {:name undocumented, :file "compojure/api/core.clj", :line 40, :arglists ([& handlers]), :doc "Routes without route-documentation. Can be used to wrap routes,\nnot satisfying compojure.api.routes/Routing -protocol.", :type :var})} {:name compojure.api.exception, :publics ({:name http-response-handler, :file "compojure/api/exception.clj", :line 59, :arglists ([_ {:keys [response]} _]), :doc "reads response from ex-data :response\n", :type :var} {:name mapped-exception-types, :file "compojure/api/exception.clj", :line 96, :type :var} {:name request-parsing-handler, :file "compojure/api/exception.clj", :line 70, :arglists ([ex data req]), :type :var} {:name request-validation-handler, :file "compojure/api/exception.clj", :line 42, :arglists ([e data req]), :doc "Creates error response based on Schema error. The following keys are available:\n\n:type            type of the exception (::request-validation)\n:coercion        coercion instance used\n:value           value that was validated\n:in              location of the value (e.g. [:request :query-params])\n:schema          schema to be validated against\n:error           schema error\n:request         raw request", :type :var} {:name response-validation-handler, :file "compojure/api/exception.clj", :line 23, :arglists ([e data req]), :doc "Creates error response based on a response error. The following keys are available:\n\n:type            type of the exception (::response-validation)\n:coercion        coercion instance used\n:in              location of the value ([:response :body])\n:schema          schema to be validated against\n:error           schema error\n:request         raw request\n:response        raw response", :type :var} {:name safe-handler, :file "compojure/api/exception.clj", :line 12, :arglists ([e data req]), :doc "Writes :error to log with the exception message & stacktrace.\n\nError response only contains class of the Exception so that it won't accidentally\nexpose secret details.", :type :var} {:name schema-error-handler, :file "compojure/api/exception.clj", :line 64, :arglists ([e data req]), :doc "Creates error response based on Schema error.\n", :type :var} {:name with-logging, :file "compojure/api/exception.clj", :line 82, :arglists ([handler] [handler log-level]), :doc "Wrap compojure-api exception-handler a function which will log the\nexception message and stack-trace with given log-level.", :type :var})} {:name compojure.api.help, :publics ({:name code, :file "compojure/api/help.clj", :line 20, :arglists ([& s]), :type :var} {:name help, :file "compojure/api/help.clj", :line 62, :arglists ([] [topic] [topic subject]), :doc "Inputs: ([] [topic :- Topic] [topic :- Topic subject :- Subject])\n", :type :var} {:name help-for, :file "compojure/api/help.clj", :line 23, :type :multimethod} {:name Subject, :file "compojure/api/help.clj", :line 6, :type :var} {:name text, :file "compojure/api/help.clj", :line 12, :arglists ([& s]), :type :var} {:name title, :file "compojure/api/help.clj", :line 17, :arglists ([& s]), :type :var} {:name Topic, :file "compojure/api/help.clj", :line 5, :type :var})} {:name compojure.api.main, :publics ({:name -main, :file "compojure/api/main.clj", :line 16, :arglists ([& args]), :type :var} {:name resolve-start-fn, :file "compojure/api/main.clj", :line 5, :arglists ([]), :type :var})} {:name compojure.api.meta, :publics ({:name +compojure-api-request+, :file "compojure/api/meta.clj", :line 17, :doc "lexically bound ring-request for handlers.\n", :type :var} {:name dummy-let, :file "compojure/api/meta.clj", :line 557, :arglists ([bindings & body]), :doc "Dummy let-macro used in resolving route-docs. not part of normal invokation chain.\n", :type :macro} {:name dummy-letk, :file "compojure/api/meta.clj", :line 563, :arglists ([bindings & body]), :doc "Dummy letk-macro used in resolving route-docs. not part of normal invokation chain.\n", :type :macro} {:name fnk-schema, :file "compojure/api/meta.clj", :line 28, :arglists ([bind]), :type :var} {:name merge-parameters, :file "compojure/api/meta.clj", :line 622, :arglists ([info]), :doc "Merge parameters at runtime to allow usage of runtime-paramers with route-macros.\n", :type :var} {:name restructure, :file "compojure/api/meta.clj", :line 631, :arglists ([method [path route-arg & args] {:keys [context?]}]), :type :var} {:name restructure-param, :file "compojure/api/meta.clj", :line 66, :doc "Restructures a key value pair in smart routes. By default the key\nis consumed form the :parameters map in acc. k = given key, v = value.", :type :multimethod} {:name routing, :file "compojure/api/meta.clj", :line 586, :arglists ([handlers]), :type :var} {:name src-coerce!, :file "compojure/api/meta.clj", :line 50, :arglists ([schema key type] [schema key type keywordize?]), :doc "Inputs: ([schema key type] [schema key type keywordize?])\n\nReturn source code for coerce! for a schema with coercion type,\nextracted from a key in a ring request.", :type :var} {:name static-context, :file "compojure/api/meta.clj", :line 580, :arglists ([path route]), :type :macro} {:name strict, :file "compojure/api/meta.clj", :line 25, :arglists ([schema]), :type :var})} {:name compojure.api.methods, :publics ({:name all-methods, :file "compojure/api/methods.clj", :line 3, :type :var})} {:name compojure.api.middleware, :publics ({:name api-middleware, :file "compojure/api/middleware.clj", :line 213, :arglists ([handler] [handler options]), :doc "Opinionated chain of middlewares for web apis. Takes optional options-map.\n\n### Exception handlers\n\nAn error handler is a function of exception, ex-data and request to response.\n\nWhen defining these options, it is suggested to use alias for the exceptions namespace,\ne.g. `[compojure.api.exception :as ex]`.\n\nDefault:\n\n    {::ex/request-validation  ex/request-validation-handler\n     ::ex/request-parsing     ex/request-parsing-handler\n     ::ex/response-validation ex/response-validation-handler\n     ::ex/default             ex/safe-handler}\n\nNote: Because the handlers are merged into default handlers map, to disable default handler you\nneed to provide `nil` value as handler.\n\nNote: To catch Schema errors use `{:schema.core/error ex/schema-error-handler}`.\n\n### Options\n\n- **:exceptions**                for *compojure.api.middleware/wrap-exceptions* (nil to unmount it)\n    - **:handlers**                Map of error handlers for different exception types, type refers to `:type` key in ExceptionInfo data.\n\n- **:formats**                   for Muuntaja middleware. Value can be a valid muuntaja options-map,\n                                 a Muuntaja instance or nil (to unmount it). See\n                                 https://github.com/metosin/muuntaja/wiki/Configuration for details.\n\n- **:middleware**                vector of extra middleware to be applied last (just before the handler).\n\n- **:ring-swagger**              options for ring-swagger's swagger-json method.\n                                 e.g. `{:ignore-missing-mappings? true}`\n\n- **:coercion**                  A function from request->type->coercion-matcher, used\n                                 in endpoint coercion for types :body, :string and :response.\n                                 Defaults to `compojure.api.middleware/default-coercion`\n                                 Setting value to nil disables all coercion.\n\n- **:components**                Components which should be accessible to handlers using\n                                 :components restructuring. (If you are using api,\n                                 you might want to take look at using wrap-components\n                                 middleware manually.). Defaults to nil (middleware not mounted).", :type :var} {:name api-middleware-defaults, :file "compojure/api/middleware.clj", :line 198, :type :var} {:name api-middleware-options, :file "compojure/api/middleware.clj", :line 209, :arglists ([options]), :type :var} {:name compose-middleware, :file "compojure/api/middleware.clj", :line 163, :arglists ([middleware]), :type :var} {:name create-muuntaja, :file "compojure/api/middleware.clj", :line 128, :arglists ([] [muuntaja-or-options]), :type :var} {:name default-muuntaja-options, :file "compojure/api/middleware.clj", :line 122, :type :var} {:name encode?, :file "compojure/api/middleware.clj", :line 115, :arglists ([_ response]), :doc "Returns true if the response body is serializable: body is a\ncollection or response has key :compojure.api.meta/serializable?", :type :var} {:name get-components, :file "compojure/api/middleware.clj", :line 84, :arglists ([req]), :type :var} {:name get-swagger-data, :file "compojure/api/middleware.clj", :line 179, :arglists ([request]), :doc "Reads and deep-merges top-level swagger-data from request,\npushed in by set-swagger-data.", :type :var} {:name middleware-fn, :file "compojure/api/middleware.clj", :line 157, :arglists ([middleware]), :type :var} {:name set-swagger-data, :file "compojure/api/middleware.clj", :line 173, :arglists ([request data]), :doc "Add extra top-level swagger-data into a request.\nData can be read with get-swagger-data.", :type :var} {:name wrap-coercion, :file "compojure/api/middleware.clj", :line 104, :arglists ([handler coercion]), :type :var} {:name wrap-components, :file "compojure/api/middleware.clj", :line 75, :arglists ([handler components]), :doc "Assoc given components to the request.\n", :type :var} {:name wrap-exceptions, :file "compojure/api/middleware.clj", :line 46, :arglists ([handler {:keys [handlers]}]), :doc "Catches all exceptions and delegates to correct error handler according to :type of Exceptions\n- **:handlers** - a map from exception type to handler\n  - **:compojure.api.exception/default** - Handler used when exception type doesn't match other handler,\n                                           by default prints stack trace.", :type :var} {:name wrap-format, :file "compojure/api/middleware.clj", :line 301, :arglists ([handler] [handler options]), :doc "Muuntaja format middleware. Can be safely mounted on top of multiple api\n\n- **:formats**                   for Muuntaja middleware. Value can be a valid muuntaja options-map,\n                                 a Muuntaja instance or nil (to unmount it). See\n                                 https://github.com/metosin/muuntaja/wiki/Configuration for details.", :type :var} {:name wrap-inject-data, :file "compojure/api/middleware.clj", :line 91, :arglists ([handler data]), :doc "Injects data into the request.\n", :type :var} {:name wrap-swagger-data, :file "compojure/api/middleware.clj", :line 185, :arglists ([handler data]), :doc "Middleware that adds top level swagger-data into request.\n", :type :var})} {:name compojure.api.request, :publics ({:name coercion, :file "compojure/api/request.clj", :line 3, :doc "Request-scoped coercion\n", :type :var} {:name lookup, :file "compojure/api/request.clj", :line 19, :doc "Reverse routing tree\n", :type :var} {:name muuntaja, :file "compojure/api/request.clj", :line 23, :doc "Muuntaja instance\n", :type :var} {:name paths, :file "compojure/api/request.clj", :line 15, :doc "Paths\n", :type :var} {:name ring-swagger, :file "compojure/api/request.clj", :line 11, :doc "Ring-swagger options\n", :type :var} {:name swagger, :file "compojure/api/request.clj", :line 7, :doc "Vector of extra swagger data\n", :type :var})} {:name compojure.api.resource, :publics ({:name Options, :file "compojure/api/resource.clj", :line 143, :doc "\n", :type :var} {:name resource, :file "compojure/api/resource.clj", :line 148, :arglists ([data]), :doc "Creates a nested compojure-api Route from enchanced ring-swagger operations map.\nBy default, applies both request- and response-coercion based on those definitions.\n\nExtra keys:\n\n- **:middleware**     Middleware in duct-format either at top-level or under methods.\n                      Top-level mw are applied first if route matches, method-level\n                      mw are applied next if method matches\n\n- **:coercion**       A function from request->type->coercion-matcher, used\n                      in resource coercion for :body, :string and :response.\n                      Setting value to `(constantly nil)` disables both request- &\n                      response coercion. See tests and wiki for details.\n\nEnchancements to ring-swagger operations map:\n\n1) :parameters use ring request keys (query-params, path-params, ...) instead of\nswagger-params (query, path, ...). This keeps things simple as ring keys are used in\nthe handler when destructuring the request.\n\n2) at resource root, one can add any ring-swagger operation definitions, which will be\navailable for all operations, using the following rules:\n\n  2.1) :parameters are deep-merged into operation :parameters\n  2.2) :responses are merged into operation :responses (operation can fully override them)\n  2.3) all others (:produces, :consumes, :summary,...) are deep-merged by compojure-api\n\n3) special keys `:handler` and/or `:async-handler` either under operations or at top-level.\nThey should be 1-ary and 3-ary Ring handler functions, respectively, that are responsible\nfor the actual request processing. Handler lookup order is the following:\n\n  3.1) If called asynchronously, operations-level :async-handler\n  3.2) Operations-level :handler\n  3.3) If called asynchronously, top-level :async-handler\n  3.4) Top-level :handler\n\n4) request-coercion is applied once, using deep-merged parameters for a given\noperation or resource-level if only resource-level handler is defined.\n\n5) response-coercion is applied once, using merged responses for a given\noperation or resource-level if only resource-level handler is defined.\n\nNote: Swagger operations are generated only from declared operations (:get, :post, ..),\ndespite the top-level handler could process more operations.\n\nExample:\n\n(resource\n  {:parameters {:query-params {:x Long}}\n   :responses {500 {:schema {:reason s/Str}}}\n   :get {:parameters {:query-params {:y Long}}\n         :responses {200 {:schema {:total Long}}}\n         :handler (fn [request]\n                    (ok {:total (+ (-> request :query-params :x)\n                                   (-> request :query-params :y))}))}\n   :post {}\n   :handler (constantly\n              (internal-server-error {:reason \"not implemented\"}))})", :type :var})} {:name compojure.api.routes, :publics ({:name all-paths, :file "compojure/api/routes.clj", :line 167, :arglists ([routes]), :type :var} {:name fail-on-invalid-child-routes, :file "compojure/api/routes.clj", :line 111, :arglists ([handler invalid-childs]), :type :var} {:name filter-routes, :file "compojure/api/routes.clj", :line 40, :arglists ([{:keys [childs], :as handler} {:keys [invalid-routes-fn]}]), :type :var} {:name get-routes, :file "compojure/api/routes.clj", :line 46, :arglists ([handler] [handler options]), :type :var} {:name get-static-context-routes, :file "compojure/api/routes.clj", :line 55, :arglists ([handler] [handler options]), :type :var} {:name log-invalid-child-routes, :file "compojure/api/routes.clj", :line 116, :arglists ([handler invalid-childs]), :type :var} {:name non-nil-routes, :file "compojure/api/routes.clj", :line 200, :arglists ([endpoint]), :type :var} {:name path-for, :file "compojure/api/routes.clj", :line 240, :arglists ([route-name & [params]]), :doc "Extracts the lookup-table from request and finds a route by name.\n", :type :macro} {:name path-for*, :file "compojure/api/routes.clj", :line 227, :arglists ([route-name request & [params]]), :doc "Extracts the lookup-table from request and finds a route by name.\n", :type :var} {:name ring-swagger-paths, :file "compojure/api/routes.clj", :line 142, :arglists ([routes]), :type :var} {:name Route, :file "compojure/api/routes.clj", :line 68, :type :var} {:name route-lookup-table, :file "compojure/api/routes.clj", :line 178, :arglists ([routes]), :type :var} {:name Routing, :file "compojure/api/routes.clj", :line 30, :type :protocol, :members ({:name -get-routes, :arglists ([handler options]), :type :var})})} {:name compojure.api.swagger, :publics ({:name base-path, :file "compojure/api/swagger.clj", :line 15, :arglists ([request]), :type :var} {:name swagger-defaults, :file "compojure/api/swagger.clj", :line 55, :type :var} {:name swagger-docs, :file "compojure/api/swagger.clj", :line 36, :arglists ([{:keys [path], :or {path "/swagger.json"}, :as options}]), :type :var} {:name swagger-routes, :file "compojure/api/swagger.clj", :line 57, :arglists ([] [options]), :doc "Returns routes for swagger-articats (ui & spec). Accepts an options map, with the\nfollowing options:\n\n**:ui**              Path for the swagger-ui (defaults to \"/\").\n                     Setting the value to nil will cause the swagger-ui not to be mounted\n\n**:spec**            Path for the swagger-spec (defaults to \"/swagger.json\")\n                     Setting the value to nil will cause the swagger-ui not to be mounted\n\n**:data**            Swagger data in the Ring-Swagger format.\n\n**:options**\n  **:ui**            Options to configure the ui\n  **:spec**          Options to configure the spec. Nada at the moment.\n\nExample options:\n\n  {:ui \"/api-docs\"\n   :spec \"/swagger.json\"\n   :options {:ui {:jsonEditor true}\n             :spec {}}\n   :data {:basePath \"/app\"\n          :info {:version \"1.0.0\"\n                 :title \"Sausages\"\n                 :description \"Sausage description\"\n                 :termsOfService \"http://helloreverb.com/terms/\"\n                 :contact {:name \"My API Team\"\n                           :email \"foo@example.com\"\n                           :url \"http://www.metosin.fi\"}\n                 :license {:name: \"Eclipse Public License\"\n                           :url: \"http://www.eclipse.org/legal/epl-v10.html\"}}\n          :tags [{:name \"sausages\", :description \"Sausage api-set\"}]}}", :type :var} {:name swagger-spec-path, :file "compojure/api/swagger.clj", :line 19, :arglists ([app]), :type :var} {:name swagger-ui, :file "compojure/api/swagger.clj", :line 31, :arglists ([options]), :type :var} {:name transform-operations, :file "compojure/api/swagger.clj", :line 28, :arglists ([swagger]), :type :var})} {:name compojure.api.sweet, :publics ({:name ANY, :file "compojure/api/core.clj", :line 61, :arglists ([& args]), :type :macro} {:name api, :file "compojure/api/api.clj", :line 19, :arglists ([& body]), :doc "Returns a ring handler wrapped in compojure.api.middleware/api-middlware.\nCreates the route-table at api creation time and injects that into the request via\nmiddlewares. Api and the mounted api-middleware can be configured by optional\noptions map as the first parameter:\n\n    (api\n      {:exceptions {:handlers {:compojure.api.exception/default my-logging-handler}}\n       :api {:invalid-routes-fn (constantly nil)}\n       :swagger {:spec \"/swagger.json\"\n                 :ui \"/api-docs\"\n                 :data {:info {:version \"1.0.0\"\n                               :title \"My API\"\n                               :description \"the description\"}}}}\n      (context \"/api\" []\n        ...))\n\n### direct api options:\n\n- **:api**                       All api options are under `:api`.\n   - **:invalid-routes-fn**        A 2-arity function taking handler and a sequence of\n                                   invalid routes (not satisfying compojure.api.route.Routing)\n                                   setting value to nil ignores invalid routes completely.\n                                   defaults to `compojure.api.routes/log-invalid-child-routes`\n   - **:disable-api-middleware?**  boolean to disable the `api-middleware` from api.\n- **:swagger**                   Options to configure the Swagger-routes. Defaults to nil.\n                                 See `compojure.api.swagger/swagger-routes` for details.\n\n### api-middleware options\n\nSee `compojure.api.middleware/api-middleware` for more available options.\n\nOpinionated chain of middlewares for web apis. Takes optional options-map.\n\n### Exception handlers\n\nAn error handler is a function of exception, ex-data and request to response.\n\nWhen defining these options, it is suggested to use alias for the exceptions namespace,\ne.g. `[compojure.api.exception :as ex]`.\n\nDefault:\n\n    {::ex/request-validation  ex/request-validation-handler\n     ::ex/request-parsing     ex/request-parsing-handler\n     ::ex/response-validation ex/response-validation-handler\n     ::ex/default             ex/safe-handler}\n\nNote: Because the handlers are merged into default handlers map, to disable default handler you\nneed to provide `nil` value as handler.\n\nNote: To catch Schema errors use `{:schema.core/error ex/schema-error-handler}`.\n\n### Options\n\n- **:exceptions**                for *compojure.api.middleware/wrap-exceptions* (nil to unmount it)\n    - **:handlers**                Map of error handlers for different exception types, type refers to `:type` key in ExceptionInfo data.\n\n- **:formats**                   for Muuntaja middleware. Value can be a valid muuntaja options-map,\n                                 a Muuntaja instance or nil (to unmount it). See\n                                 https://github.com/metosin/muuntaja/wiki/Configuration for details.\n\n- **:middleware**                vector of extra middleware to be applied last (just before the handler).\n\n- **:ring-swagger**              options for ring-swagger's swagger-json method.\n                                 e.g. `{:ignore-missing-mappings? true}`\n\n- **:coercion**                  A function from request->type->coercion-matcher, used\n                                 in endpoint coercion for types :body, :string and :response.\n                                 Defaults to `compojure.api.middleware/default-coercion`\n                                 Setting value to nil disables all coercion.\n\n- **:components**                Components which should be accessible to handlers using\n                                 :components restructuring. (If you are using api,\n                                 you might want to take look at using wrap-components\n                                 middleware manually.). Defaults to nil (middleware not mounted).", :type :var} {:name context, :file "compojure/api/core.clj", :line 58, :arglists ([& args]), :type :macro} {:name defroutes, :file "compojure/api/core.clj", :line 24, :arglists ([name & routes]), :doc "Define a Ring handler function from a sequence of routes.\nThe name may optionally be followed by a doc-string and metadata map.", :type :macro} {:name DELETE, :file "compojure/api/core.clj", :line 64, :arglists ([& args]), :type :macro} {:name describe, :file "ring/swagger/json_schema.clj", :line 44, :arglists ([schema desc & kvs]), :doc "Attach description and possibly other meta-data to a schema.\n", :type :var} {:name GET, :file "compojure/api/core.clj", :line 60, :arglists ([& args]), :type :macro} {:name HEAD, :file "compojure/api/core.clj", :line 62, :arglists ([& args]), :type :macro} {:name let-routes, :file "compojure/api/core.clj", :line 32, :arglists ([bindings & body]), :doc "Takes a vector of bindings and a body of routes.\n\nEquivalent to: `(let [...] (routes ...))`", :type :macro} {:name OPTIONS, :file "compojure/api/core.clj", :line 65, :arglists ([& args]), :type :macro} {:name PATCH, :file "compojure/api/core.clj", :line 63, :arglists ([& args]), :type :macro} {:name path-for, :file "compojure/api/routes.clj", :line 240, :arglists ([route-name & [params]]), :doc "Extracts the lookup-table from request and finds a route by name.\n", :type :macro} {:name POST, :file "compojure/api/core.clj", :line 66, :arglists ([& args]), :type :macro} {:name PUT, :file "compojure/api/core.clj", :line 67, :arglists ([& args]), :type :macro} {:name resource, :file "compojure/api/resource.clj", :line 148, :arglists ([data]), :doc "Creates a nested compojure-api Route from enchanced ring-swagger operations map.\nBy default, applies both request- and response-coercion based on those definitions.\n\nExtra keys:\n\n- **:middleware**     Middleware in duct-format either at top-level or under methods.\n                      Top-level mw are applied first if route matches, method-level\n                      mw are applied next if method matches\n\n- **:coercion**       A function from request->type->coercion-matcher, used\n                      in resource coercion for :body, :string and :response.\n                      Setting value to `(constantly nil)` disables both request- &\n                      response coercion. See tests and wiki for details.\n\nEnchancements to ring-swagger operations map:\n\n1) :parameters use ring request keys (query-params, path-params, ...) instead of\nswagger-params (query, path, ...). This keeps things simple as ring keys are used in\nthe handler when destructuring the request.\n\n2) at resource root, one can add any ring-swagger operation definitions, which will be\navailable for all operations, using the following rules:\n\n  2.1) :parameters are deep-merged into operation :parameters\n  2.2) :responses are merged into operation :responses (operation can fully override them)\n  2.3) all others (:produces, :consumes, :summary,...) are deep-merged by compojure-api\n\n3) special keys `:handler` and/or `:async-handler` either under operations or at top-level.\nThey should be 1-ary and 3-ary Ring handler functions, respectively, that are responsible\nfor the actual request processing. Handler lookup order is the following:\n\n  3.1) If called asynchronously, operations-level :async-handler\n  3.2) Operations-level :handler\n  3.3) If called asynchronously, top-level :async-handler\n  3.4) Top-level :handler\n\n4) request-coercion is applied once, using deep-merged parameters for a given\noperation or resource-level if only resource-level handler is defined.\n\n5) response-coercion is applied once, using merged responses for a given\noperation or resource-level if only resource-level handler is defined.\n\nNote: Swagger operations are generated only from declared operations (:get, :post, ..),\ndespite the top-level handler could process more operations.\n\nExample:\n\n(resource\n  {:parameters {:query-params {:x Long}}\n   :responses {500 {:schema {:reason s/Str}}}\n   :get {:parameters {:query-params {:y Long}}\n         :responses {200 {:schema {:total Long}}}\n         :handler (fn [request]\n                    (ok {:total (+ (-> request :query-params :x)\n                                   (-> request :query-params :y))}))}\n   :post {}\n   :handler (constantly\n              (internal-server-error {:reason \"not implemented\"}))})", :type :var} {:name routes, :file "compojure/api/core.clj", :line 16, :arglists ([& handlers]), :doc "Create a Ring handler by combining several handlers into one.\n", :type :var} {:name swagger-routes, :file "compojure/api/swagger.clj", :line 57, :arglists ([] [options]), :doc "Returns routes for swagger-articats (ui & spec). Accepts an options map, with the\nfollowing options:\n\n**:ui**              Path for the swagger-ui (defaults to \"/\").\n                     Setting the value to nil will cause the swagger-ui not to be mounted\n\n**:spec**            Path for the swagger-spec (defaults to \"/swagger.json\")\n                     Setting the value to nil will cause the swagger-ui not to be mounted\n\n**:data**            Swagger data in the Ring-Swagger format.\n\n**:options**\n  **:ui**            Options to configure the ui\n  **:spec**          Options to configure the spec. Nada at the moment.\n\nExample options:\n\n  {:ui \"/api-docs\"\n   :spec \"/swagger.json\"\n   :options {:ui {:jsonEditor true}\n             :spec {}}\n   :data {:basePath \"/app\"\n          :info {:version \"1.0.0\"\n                 :title \"Sausages\"\n                 :description \"Sausage description\"\n                 :termsOfService \"http://helloreverb.com/terms/\"\n                 :contact {:name \"My API Team\"\n                           :email \"foo@example.com\"\n                           :url \"http://www.metosin.fi\"}\n                 :license {:name: \"Eclipse Public License\"\n                           :url: \"http://www.eclipse.org/legal/epl-v10.html\"}}\n          :tags [{:name \"sausages\", :description \"Sausage api-set\"}]}}", :type :var} {:name undocumented, :file "compojure/api/core.clj", :line 40, :arglists ([& handlers]), :doc "Routes without route-documentation. Can be used to wrap routes,\nnot satisfying compojure.api.routes/Routing -protocol.", :type :var})} {:name compojure.api.upload, :publics ({:name ByteArrayUpload, :file "ring/swagger/upload.clj", :line 27, :doc "Schema for file param created by ring.middleware.multipart-params.byte-array store.\n", :type :var} {:name TempFileUpload, :file "ring/swagger/upload.clj", :line 20, :doc "Schema for file param created by ring.middleware.multipart-params.temp-file store.\n", :type :var} {:name wrap-multipart-params, :file "ring/middleware/multipart_params.clj", :line 138, :arglists ([handler] [handler options]), :doc "Middleware to parse multipart parameters from a request. Adds the\nfollowing keys to the request map:\n\n:multipart-params - a map of multipart parameters\n:params           - a merged map of all types of parameter\n\nThe following options are accepted\n\n:encoding          - character encoding to use for multipart parsing.\n                     Overrides the encoding specified in the request. If not\n                     specified, uses the encoding specified in a part named\n                     \"_charset_\", or the content type for each part, or\n                     request character encoding if the part has no encoding,\n                     or \"UTF-8\" if no request character encoding is set.\n\n:fallback-encoding - specifies the character encoding used in parsing if a\n                     part of the request does not specify encoding in its\n                     content type or no part named \"_charset_\" is present.\n                     Has no effect if :encoding is also set.\n\n:store             - a function that stores a file upload. The function\n                     should expect a map with :filename, :content-type and\n                     :stream keys, and its return value will be used as the\n                     value for the parameter in the multipart parameter map.\n                     The default storage function is the temp-file-store.\n\n:progress-fn       - a function that gets called during uploads. The\n                     function should expect four parameters: request,\n                     bytes-read, content-length, and item-count.", :type :var})} {:name compojure.api.validator, :publics ({:name validate, :file "compojure/api/validator.clj", :line 8, :arglists ([api]), :doc "Validates an api. If the api is Swagger-enabled, the swagger-spec\nis requested and validated against the JSON Schema. Returns either\nthe (valid) api or throws an exception. Requires lazily the\nring.swagger.validator -namespace allowing it to be excluded, #227", :type :var})})}, :pom-str "<?xml version=\"1.0\" encoding=\"UTF-8\"?><project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>metosin</groupId>\n  <artifactId>compojure-api</artifactId>\n  <packaging>jar</packaging>\n  <version>2.0.0-alpha27</version>\n  <name>compojure-api</name>\n  <description>Compojure Api</description>\n  <url>https://github.com/metosin/compojure-api</url>\n  <licenses>\n    <license>\n      <name>Eclipse Public License</name>\n      <url>http://www.eclipse.org/legal/epl-v10.html</url>\n      <distribution>repo</distribution>\n      <comments>same as Clojure</comments>\n    </license>\n  </licenses>\n  <scm>\n    <url>https://github.com/metosin/compojure-api</url>\n    <connection>scm:git:git://github.com/metosin/compojure-api.git</connection>\n    <developerConnection>scm:git:ssh://git@github.com/metosin/compojure-api.git</developerConnection>\n    <tag>e565483b4d28cfbc70be1542c0ec82390a318eaf</tag>\n  </scm>\n  <build>\n    <sourceDirectory>src</sourceDirectory>\n    <testSourceDirectory>test19</testSourceDirectory>\n    <resources>\n      <resource>\n        <directory>resources</directory>\n      </resource>\n    </resources>\n    <testResources>\n      <testResource>\n        <directory>resources</directory>\n      </testResource>\n    </testResources>\n    <directory>target</directory>\n    <outputDirectory>target/classes</outputDirectory>\n    <plugins>\n      <plugin>\n        <groupId>org.codehaus.mojo</groupId>\n        <artifactId>build-helper-maven-plugin</artifactId>\n        <version>1.7</version>\n        <executions>\n          <execution>\n            <id>add-test-source</id>\n            <phase>generate-test-sources</phase>\n            <goals>\n              <goal>add-test-source</goal>\n            </goals>\n            <configuration>\n              <sources>\n                <source>test</source>\n              </sources>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n  </build>\n  <repositories>\n    <repository>\n      <id>central</id>\n      <url>https://repo1.maven.org/maven2/</url>\n      <snapshots>\n        <enabled>false</enabled>\n      </snapshots>\n      <releases>\n        <enabled>true</enabled>\n      </releases>\n    </repository>\n    <repository>\n      <id>clojars</id>\n      <url>https://repo.clojars.org/</url>\n      <snapshots>\n        <enabled>true</enabled>\n      </snapshots>\n      <releases>\n        <enabled>true</enabled>\n      </releases>\n    </repository>\n  </repositories>\n  <dependencyManagement>\n    <dependencies/>\n  </dependencyManagement>\n  <dependencies>\n    <dependency>\n      <groupId>potemkin</groupId>\n      <artifactId>potemkin</artifactId>\n      <version>0.4.5</version>\n    </dependency>\n    <dependency>\n      <groupId>prismatic</groupId>\n      <artifactId>schema</artifactId>\n      <version>1.1.9</version>\n    </dependency>\n    <dependency>\n      <groupId>prismatic</groupId>\n      <artifactId>plumbing</artifactId>\n      <version>0.5.5</version>\n    </dependency>\n    <dependency>\n      <groupId>ikitommi</groupId>\n      <artifactId>linked</artifactId>\n      <version>1.3.1-alpha1</version>\n    </dependency>\n    <dependency>\n      <groupId>metosin</groupId>\n      <artifactId>muuntaja</artifactId>\n      <version>0.6.1</version>\n    </dependency>\n    <dependency>\n      <groupId>com.fasterxml.jackson.datatype</groupId>\n      <artifactId>jackson-datatype-joda</artifactId>\n      <version>2.9.7</version>\n    </dependency>\n    <dependency>\n      <groupId>ring</groupId>\n      <artifactId>ring-core</artifactId>\n      <version>1.7.0</version>\n      <exclusions>\n        <exclusion>\n          <artifactId>clj-time</artifactId>\n          <groupId>clj-time</groupId>\n        </exclusion>\n        <exclusion>\n          <artifactId>commons-codec</artifactId>\n          <groupId>commons-codec</groupId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n    <dependency>\n      <groupId>compojure</groupId>\n      <artifactId>compojure</artifactId>\n      <version>1.6.1</version>\n      <exclusions>\n        <exclusion>\n          <artifactId>joda-time</artifactId>\n          <groupId>joda-time</groupId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n    <dependency>\n      <groupId>metosin</groupId>\n      <artifactId>spec-tools</artifactId>\n      <version>0.8.0</version>\n    </dependency>\n    <dependency>\n      <groupId>metosin</groupId>\n      <artifactId>ring-http-response</artifactId>\n      <version>0.9.0</version>\n      <exclusions>\n        <exclusion>\n          <artifactId>joda-time</artifactId>\n          <groupId>joda-time</groupId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n    <dependency>\n      <groupId>metosin</groupId>\n      <artifactId>ring-swagger-ui</artifactId>\n      <version>2.2.10</version>\n    </dependency>\n    <dependency>\n      <groupId>metosin</groupId>\n      <artifactId>ring-swagger</artifactId>\n      <version>0.26.1</version>\n      <exclusions>\n        <exclusion>\n          <artifactId>joda-time</artifactId>\n          <groupId>joda-time</groupId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n    <dependency>\n      <groupId>org.clojure</groupId>\n      <artifactId>clojure</artifactId>\n      <version>1.9.0</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.clojure</groupId>\n      <artifactId>core.async</artifactId>\n      <version>0.4.474</version>\n      <exclusions>\n        <exclusion>\n          <artifactId>tools.reader</artifactId>\n          <groupId>org.clojure</groupId>\n        </exclusion>\n      </exclusions>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>javax.servlet</groupId>\n      <artifactId>javax.servlet-api</artifactId>\n      <version>4.0.1</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>peridot</groupId>\n      <artifactId>peridot</artifactId>\n      <version>0.5.1</version>\n      <exclusions>\n        <exclusion>\n          <artifactId>clj-time</artifactId>\n          <groupId>clj-time</groupId>\n        </exclusion>\n        <exclusion>\n          <artifactId>commons-codec</artifactId>\n          <groupId>commons-codec</groupId>\n        </exclusion>\n      </exclusions>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>midje</groupId>\n      <artifactId>midje</artifactId>\n      <version>1.9.4</version>\n      <exclusions>\n        <exclusion>\n          <artifactId>tools.namespace</artifactId>\n          <groupId>org.clojure</groupId>\n        </exclusion>\n        <exclusion>\n          <artifactId>specter</artifactId>\n          <groupId>com.rpl</groupId>\n        </exclusion>\n        <exclusion>\n          <artifactId>commons-codec</artifactId>\n          <groupId>commons-codec</groupId>\n        </exclusion>\n        <exclusion>\n          <artifactId>clj-time</artifactId>\n          <groupId>clj-time</groupId>\n        </exclusion>\n      </exclusions>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>com.rpl</groupId>\n      <artifactId>specter</artifactId>\n      <version>1.1.1</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>com.stuartsierra</groupId>\n      <artifactId>component</artifactId>\n      <version>0.3.2</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>metosin</groupId>\n      <artifactId>jsonista</artifactId>\n      <version>0.2.2</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>reloaded.repl</groupId>\n      <artifactId>reloaded.repl</artifactId>\n      <version>0.2.4</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>metosin</groupId>\n      <artifactId>muuntaja-msgpack</artifactId>\n      <version>0.6.1</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>metosin</groupId>\n      <artifactId>muuntaja-yaml</artifactId>\n      <version>0.6.1</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.immutant</groupId>\n      <artifactId>immutant</artifactId>\n      <version>2.1.10</version>\n      <exclusions>\n        <exclusion>\n          <artifactId>joda-time</artifactId>\n          <groupId>joda-time</groupId>\n        </exclusion>\n        <exclusion>\n          <artifactId>slf4j-api</artifactId>\n          <groupId>org.slf4j</groupId>\n        </exclusion>\n      </exclusions>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>http-kit</groupId>\n      <artifactId>http-kit</artifactId>\n      <version>2.3.0</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>criterium</groupId>\n      <artifactId>criterium</artifactId>\n      <version>0.4.4</version>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n</project>\n\n<!-- This file was autogenerated by Leiningen.\n  Please do not edit it directly; instead edit project.clj and regenerate it.\n  It should not be considered canonical data. For more information see\n  https://github.com/technomancy/leiningen -->\n"}