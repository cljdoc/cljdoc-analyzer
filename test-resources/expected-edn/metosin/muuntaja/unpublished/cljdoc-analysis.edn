{:group-id "metosin", :artifact-id "muuntaja", :version "unpublished", :analysis {"clj" ({:name muuntaja.core, :publics ({:name Adapter, :file "muuntaja/core.clj", :line 41, :type :var} {:name available-charsets, :file "muuntaja/core.clj", :line 99, :doc "Set of recognised charsets by the current JVM\n", :type :var} {:name charsets, :file "muuntaja/core.clj", :line 59, :arglists ([m]), :doc "Set of charsets that the Muuntaja instance can handle\n", :type :var} {:name create, :file "muuntaja/core.clj", :line 372, :arglists ([] [muuntaja-or-options]), :doc "Creates a new Muuntaja intance from a given prototype:\n- existing Muuntaja (no-op)\n- options-map (new created)\n- nothing (new created with default-options)", :type :var} {:name decode, :file "muuntaja/core.clj", :line 529, :arglists ([format data] [m format data] [m format data charset]), :doc "Decode data into the given format. Returns Clojure Data or throws.\n", :type :var} {:name decode-response-body, :file "muuntaja/core.clj", :line 540, :arglists ([response] [m response]), :doc "Decode response :body using the format defined by \"Content-Type\" header.\nReturns Clojure Data or throws.", :type :var} {:name decodes, :file "muuntaja/core.clj", :line 47, :arglists ([m]), :doc "Set of formats that the Muuntaja instance can decode\n", :type :var} {:name default-charset, :file "muuntaja/core.clj", :line 63, :arglists ([m]), :doc "Default charset of the Muuntaja instance\n", :type :var} {:name default-format, :file "muuntaja/core.clj", :line 67, :arglists ([m]), :doc "Default format of the Muuntaja instance\n", :type :var} {:name default-options, :file "muuntaja/core.clj", :line 103, :type :var} {:name encode, :file "muuntaja/core.clj", :line 518, :arglists ([format data] [m format data] [m format data charset]), :doc "Encode data into the given format. Returns InputStream or throws.\n", :type :var} {:name encode-collections, :file "muuntaja/core.clj", :line 96, :arglists ([_ response]), :type :var} {:name encodes, :file "muuntaja/core.clj", :line 51, :arglists ([m]), :doc "Set of formats that the Muuntaja instance can encode\n", :type :var} {:name extract-accept-charset-ring, :file "muuntaja/core.clj", :line 91, :arglists ([request]), :doc "Extracts accept-charset from ring-request.\n", :type :var} {:name extract-accept-ring, :file "muuntaja/core.clj", :line 86, :arglists ([request]), :doc "Extracts accept from ring-request.\n", :type :var} {:name extract-content-type-ring, :file "muuntaja/core.clj", :line 79, :arglists ([request]), :doc "Extracts content-type from ring-request.\n", :type :var} {:name FormatAndCharset, :file "muuntaja/core.clj", :line 35, :type :var} {:name formats, :file "muuntaja/core.clj", :line 71, :arglists ([m]), :doc "Set of formats that the Muuntaja instance can decode or encode\n", :type :var} {:name get-request-format-and-charset, :file "muuntaja/core.clj", :line 197, :arglists ([request]), :type :var} {:name get-response-format-and-charset, :file "muuntaja/core.clj", :line 200, :arglists ([request]), :type :var} {:name install, :file "muuntaja/core.clj", :line 569, :arglists ([options format] [options format name]), :type :var} {:name instance, :file "muuntaja/core.clj", :line 508, :doc "the default instance\n", :type :var} {:name matchers, :file "muuntaja/core.clj", :line 55, :arglists ([m]), :doc "Map of format->regexp that the Muuntaja instance knows\n", :type :var} {:name Muuntaja, :file "muuntaja/core.clj", :line 15, :type :protocol, :members ({:name adapters, :arglists ([this]), :type :var} {:name decoder, :arglists ([this format]), :type :var} {:name encoder, :arglists ([this format]), :type :var} {:name options, :arglists ([this]), :type :var})} {:name muuntaja?, :file "muuntaja/core.clj", :line 32, :arglists ([x]), :type :var} {:name MuuntajaHttp, :file "muuntaja/core.clj", :line 21, :type :protocol, :members ({:name format-request, :arglists ([this request]), :type :var} {:name format-response, :arglists ([this request response]), :type :var} {:name negotiate-and-format-request, :arglists ([this request]), :type :var} {:name negotiate-request-response, :arglists ([this request]), :type :var} {:name request-format, :arglists ([this request]), :type :var} {:name response-format, :arglists ([this request]), :type :var})} {:name select-formats, :file "muuntaja/core.clj", :line 555, :arglists ([options formats]), :type :var} {:name set-response-content-type, :file "muuntaja/core.clj", :line 207, :arglists ([response content-type]), :type :var} {:name slurp, :file "muuntaja/core.clj", :line 580, :arglists ([x]), :type :var} {:name transform-formats, :file "muuntaja/core.clj", :line 552, :arglists ([options f]), :type :var})} {:name muuntaja.format.core, :publics ({:name Decode, :file "muuntaja/format/core.clj", :line 3, :type :protocol, :members ({:name decode, :arglists ([this data charset]), :type :var})} {:name EncodeToBytes, :file "muuntaja/format/core.clj", :line 6, :type :protocol, :members ({:name encode-to-bytes, :arglists ([this data charset]), :type :var})} {:name EncodeToOutputStream, :file "muuntaja/format/core.clj", :line 9, :type :protocol, :members ({:name encode-to-output-stream, :arglists ([this data charset]), :type :var})} {:name Format, :file "muuntaja/format/core.clj", :line 12, :type :var})} {:name muuntaja.format.edn, :publics ({:name decoder, :file "muuntaja/format/edn.clj", :line 7, :arglists ([options]), :type :var} {:name encoder, :file "muuntaja/format/edn.clj", :line 14, :arglists ([_]), :type :var} {:name format, :file "muuntaja/format/edn.clj", :line 28, :type :var})} {:name muuntaja.format.json, :publics ({:name decoder, :file "muuntaja/format/json.clj", :line 28, :arglists ([options]), :type :var} {:name encoder, :file "muuntaja/format/json.clj", :line 37, :arglists ([options]), :type :var} {:name format, :file "muuntaja/format/json.clj", :line 52, :type :var} {:name object-mapper!, :file "muuntaja/format/json.clj", :line 11, :arglists ([{:keys [mapper], :as options}]), :type :var})} {:name muuntaja.format.transit, :publics ({:name decoder, :file "muuntaja/format/transit.clj", :line 6, :arglists ([type options]), :type :var} {:name encoder, :file "muuntaja/format/transit.clj", :line 14, :arglists ([type {:keys [verbose], :as options}]), :type :var} {:name json-format, :file "muuntaja/format/transit.clj", :line 30, :type :var} {:name msgpack-format, :file "muuntaja/format/transit.clj", :line 36, :type :var})} {:name muuntaja.interceptor, :publics ({:name exception-interceptor, :file "muuntaja/interceptor.clj", :line 11, :arglists ([] [on-exception]), :doc "Interceptor that catches exceptions of type `:muuntaja/decode`\nand invokes a 3-arity callback [^Exception e format request] which\nreturns a response.", :type :var} {:name format-interceptor, :file "muuntaja/interceptor.clj", :line 44, :arglists ([] [prototype]), :doc "Interceptor that negotiates a request body based on accept, accept-charset\nand content-type headers and decodes the body with an attached Muuntaja\ninstance into `:body-params`. Encodes also the response body with the same\nMuuntaja instance based on the negotiation information or override information\nprovided by the handler.\n\nTakes a pre-configured Muuntaja or options maps an argument.\nSee https://github.com/metosin/muuntaja for all options and defaults.", :type :var} {:name format-negotiate-interceptor, :file "muuntaja/interceptor.clj", :line 66, :arglists ([] [prototype]), :doc "Interceptor that negotiates a request body based on accept, accept-charset\nand content-type headers with an attached Muuntaja instance. Injects negotiation\nresults into request for `format-request` interceptor to use.\n\nTakes a pre-configured Muuntaja or options maps an argument.\nSee https://github.com/metosin/muuntaja for all options and defaults.", :type :var} {:name format-request-interceptor, :file "muuntaja/interceptor.clj", :line 82, :arglists ([] [prototype]), :doc "Interceptor that decodes the request body with an attached Muuntaja\ninstance into `:body-params` based on the negotiation information provided\nby `format-negotiate` interceptor.\n\nTakes a pre-configured Muuntaja or options maps an argument.\nSee https://github.com/metosin/muuntaja for all options and defaults.", :type :var} {:name format-response-interceptor, :file "muuntaja/interceptor.clj", :line 98, :arglists ([] [prototype]), :doc "Interceptor that encodes also the response body with the attached\nMuuntaja instance, based on request negotiation information provided by\n`format-negotiate` interceptor or override information provided by the handler.\n\nTakes a pre-configured Muuntaja or options maps an argument.\nSee https://github.com/metosin/muuntaja for all options and defaults.", :type :var} {:name params-interceptor, :file "muuntaja/interceptor.clj", :line 27, :arglists ([]), :doc "Interceptor that merges request `:body-params` into `:params`.\n", :type :var})} {:name muuntaja.middleware, :publics ({:name wrap-exception, :file "muuntaja/middleware.clj", :line 17, :arglists ([handler] [handler on-exception]), :doc "Middleware that catches exceptions of type `:muuntaja/decode`\nand invokes a 3-arity callback [^Exception e format request] which\nreturns a response. Support async-ring.", :type :var} {:name wrap-format, :file "muuntaja/middleware.clj", :line 56, :arglists ([handler] [handler prototype]), :doc "Middleware that negotiates a request body based on accept, accept-charset\nand content-type headers and decodes the body with an attached Muuntaja\ninstance into `:body-params`. Encodes also the response body with the same\nMuuntaja instance based on the negotiation information or override information\nprovided by the handler.\n\nTakes a pre-configured Muuntaja or options maps as second argument.\nSee https://github.com/metosin/muuntaja for all options and defaults.\nSupports async-ring.", :type :var} {:name wrap-format-negotiate, :file "muuntaja/middleware.clj", :line 82, :arglists ([handler] [handler prototype]), :doc "Middleware that negotiates a request body based on accept, accept-charset\nand content-type headers with an attached Muuntaja instance. Injects negotiation\nresults into request for `wrap-format-request` to use.\n\nTakes a pre-configured Muuntaja or options maps as second argument.\nSee https://github.com/metosin/muuntaja for all options and defaults.\nSupports async-ring.", :type :var} {:name wrap-format-request, :file "muuntaja/middleware.clj", :line 100, :arglists ([handler] [handler prototype]), :doc "Middleware that decodes the request body with an attached Muuntaja\ninstance into `:body-params` based on the negotiation information provided\nby `wrap-format-negotiate`.\n\nTakes a pre-configured Muuntaja or options maps as second argument.\nSee https://github.com/metosin/muuntaja for all options and defaults.\nSupports async-ring.", :type :var} {:name wrap-format-response, :file "muuntaja/middleware.clj", :line 118, :arglists ([handler] [handler prototype]), :doc "Middleware that encodes also the response body with the attached\nMuuntaja instance, based on request negotiation information provided by\n`wrap-format-negotiate` or override information provided by the handler.\n\nTakes a pre-configured Muuntaja or options maps as second argument.\nSee https://github.com/metosin/muuntaja for all options and defaults.\nSupports async-ring.", :type :var} {:name wrap-params, :file "muuntaja/middleware.clj", :line 37, :arglists ([handler]), :doc "Middleware that merges request `:body-params` into `:params`.\nSupports async-ring.", :type :var})} {:name muuntaja.parse, :publics ({:name fast-memoize, :file "muuntaja/parse.clj", :line 9, :arglists ([size f]), :type :var} {:name parse-accept, :file "muuntaja/parse.clj", :line 67, :arglists ([accept-header]), :doc "Parse Accept headers into a sorted sequence of content-types.\n\"application/json;level=1;q=0.4\"\n=> (\"application/json\"})", :type :var} {:name parse-accept-charset, :file "muuntaja/parse.clj", :line 92, :arglists ([s]), :type :var} {:name parse-content-type, :file "muuntaja/parse.clj", :line 34, :arglists ([s]), :type :var})} {:name muuntaja.protocols, :publics ({:name IntoInputStream, :file "muuntaja/protocols.clj", :line 48, :type :protocol, :members ({:name into-input-stream, :arglists ([this]), :type :var})})} {:name muuntaja.util, :publics ({:name assoc-assoc, :file "muuntaja/util.clj", :line 18, :arglists ([m k1 k2 v]), :type :var} {:name byte-stream, :file "muuntaja/util.clj", :line 4, :arglists ([bytes]), :type :var} {:name some-value, :file "muuntaja/util.clj", :line 14, :arglists ([pred c]), :type :var} {:name throw!, :file "muuntaja/util.clj", :line 7, :arglists ([formats format message]), :type :var} {:name when-ns, :file "muuntaja/util.clj", :line 21, :arglists ([ns & body]), :type :macro})})}, :pom-str "<?xml version=\"1.0\" encoding=\"UTF-8\"?><project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>metosin</groupId>\n  <artifactId>muuntaja</artifactId>\n  <packaging>jar</packaging>\n  <version>0.6.3</version>\n  <name>muuntaja</name>\n  <description>Clojure library for format encoding, decoding and content-negotiation</description>\n  <url>https://github.com/metosin/muuntaja</url>\n  <licenses>\n    <license>\n      <name>Eclipse Public License</name>\n      <url>http://www.eclipse.org/legal/epl-v10.html</url>\n    </license>\n  </licenses>\n  <scm/>\n  <build>\n    <sourceDirectory>src</sourceDirectory>\n    <testSourceDirectory>test</testSourceDirectory>\n    <resources>\n      <resource>\n        <directory>resources</directory>\n      </resource>\n    </resources>\n    <testResources>\n      <testResource>\n        <directory>resources</directory>\n      </testResource>\n    </testResources>\n    <directory>target</directory>\n    <outputDirectory>target/classes</outputDirectory>\n    <plugins/>\n  </build>\n  <repositories>\n    <repository>\n      <id>central</id>\n      <url>https://repo1.maven.org/maven2/</url>\n      <snapshots>\n        <enabled>false</enabled>\n      </snapshots>\n      <releases>\n        <enabled>true</enabled>\n      </releases>\n    </repository>\n    <repository>\n      <id>clojars</id>\n      <url>https://repo.clojars.org/</url>\n      <snapshots>\n        <enabled>true</enabled>\n      </snapshots>\n      <releases>\n        <enabled>true</enabled>\n      </releases>\n    </repository>\n  </repositories>\n  <dependencyManagement>\n    <dependencies>\n      <dependency>\n        <groupId>metosin</groupId>\n        <artifactId>muuntaja</artifactId>\n        <version>0.6.3</version>\n      </dependency>\n      <dependency>\n        <groupId>metosin</groupId>\n        <artifactId>jsonista</artifactId>\n        <version>0.2.2</version>\n      </dependency>\n      <dependency>\n        <groupId>com.cognitect</groupId>\n        <artifactId>transit-clj</artifactId>\n        <version>0.8.313</version>\n      </dependency>\n      <dependency>\n        <groupId>cheshire</groupId>\n        <artifactId>cheshire</artifactId>\n        <version>5.8.1</version>\n      </dependency>\n      <dependency>\n        <groupId>circleci</groupId>\n        <artifactId>clj-yaml</artifactId>\n        <version>0.5.6</version>\n      </dependency>\n      <dependency>\n        <groupId>clojure-msgpack</groupId>\n        <artifactId>clojure-msgpack</artifactId>\n        <version>1.2.1</version>\n        <exclusions>\n          <exclusion>\n            <artifactId>clojure</artifactId>\n            <groupId>org.clojure</groupId>\n          </exclusion>\n        </exclusions>\n      </dependency>\n    </dependencies>\n  </dependencyManagement>\n  <dependencies>\n    <dependency>\n      <groupId>metosin</groupId>\n      <artifactId>jsonista</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>com.cognitect</groupId>\n      <artifactId>transit-clj</artifactId>\n    </dependency>\n  </dependencies>\n</project>\n\n<!-- This file was autogenerated by Leiningen.\n  Please do not edit it directly; instead edit project.clj and regenerate it.\n  It should not be considered canonical data. For more information see\n  https://github.com/technomancy/leiningen -->\n"}